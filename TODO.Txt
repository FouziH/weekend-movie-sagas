*********************Weekend Project TO DO List Movies**************************
PHASE 1:
    [x] Create a database named `saga_movies_weekend`
    [x] Run the queries from `database.sql` on the `saga_movies_weekend` database
PHASE 2:
  [x] Create a detail component
        [x] Create Details.js file 
    [x] When a movie poster is clicked
        [x] a user should be brought to the `/details` view for that movie.
        [x]  it should show all the details **including ALL genres** for the selected movie.
            [x] You will need to store this data in redux!
                > Hint : You can make a GET request for a specific movie. Remember `req.params` and `:id`?
        [x] TODO: The details page should have a `Back to List` button, which should bring the user to the Home/List Page
### Add Movie Page

This should show:
    [x] an input field (for the movie title)
    [x] an input field (for the movie poster image URL))
    [x] a textarea (for the movie description)
    [x] a dropdown (for the genres)

The Add Movie page should have the buttons:

   [x] `Cancel` button, which should bring the user to the Home/List Page
   [x]`Save` button, which should save these inputs in the database and bring the user to the Home/List Page (which now has the new movie)

**Base functionality does not require being able to select more than one genre for a new movie**

> Hint: Look at the /api/movie POST route -- it's been made already but is performing 2 queries: one to store the movie information and another to store the genre in the junction table.

> Hint: You'll want to use the genres that are in the db for your dropdown

---

### Other Ideas

- [ ] Display the current values in the input (title) and textarea (description) on the Edit Page
- [ ] Display all genres on movie list page. Research [array_agg](https://stackoverflow.com/questions/43458174/how-to-save-and-return-javascript-object-with-subarray-in-normalized-sql) to make this possible.
- [ ] Allow the user to select many genres as they add
    - You'll have to change the INSERT statement
- [ ] Move sagas and reducers out of your `index.js` and into separate files (ideally in `src/redux/reducers` and `src/redux/sagas` folders).
- [ ] Allow the user to refresh the details or edit page. The url for the details page would be something like `/details/1` for movie with id of `1`. Research [react router params](https://reacttraining.com/react-router/web/example/url-params).
- [ ] Allow the user to add a genre to a movie.
- [ ] Allow the user to remove a genre from a movie.
- [ ] Only display the top 10 movies, and allow the user to search for movie titles with a search bar on the home page (you can do this on the client side or the server side, server side is a bigger stretch, but good practice).
- [ ] Create an `Admin` page. Add a link from the `Home` page to the `Admin` page. The page should initially display a login form (an input for username and an input for password). When the user enters the correct username (`camera`) and password (`action`), the page should display a form to add genres to the database, and a list of all of the genres with an `x` to remove them from the database. Note: This isn't actually secure, but it's pretty fun, and really good practice.
